// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Global.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum IGPGender: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknown // = 0
  case male // = 1
  case female // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknown
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknown
    case 1: self = .male
    case 2: self = .female
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknown: return 0
    case .male: return 1
    case .female: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPDevice: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownDevice // = 0
  case pc // = 1
  case tablet // = 2
  case mobile // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownDevice
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownDevice
    case 1: self = .pc
    case 2: self = .tablet
    case 3: self = .mobile
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownDevice: return 0
    case .pc: return 1
    case .tablet: return 2
    case .mobile: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPPlatform: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case unknownPlatform // = 0
  case android // = 1
  case ios // = 2
  case macOs // = 3
  case windows // = 4
  case linux // = 5
  case blackBerry // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .unknownPlatform
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .unknownPlatform
    case 1: self = .android
    case 2: self = .ios
    case 3: self = .macOs
    case 4: self = .windows
    case 5: self = .linux
    case 6: self = .blackBerry
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .unknownPlatform: return 0
    case .android: return 1
    case .ios: return 2
    case .macOs: return 3
    case .windows: return 4
    case .linux: return 5
    case .blackBerry: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPLanguage: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case enUs // = 0
  case faIr // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .enUs
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .enUs
    case 1: self = .faIr
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .enUs: return 0
    case .faIr: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPRoomMessageType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case text // = 0
  case image // = 1
  case imageText // = 2
  case video // = 3
  case videoText // = 4
  case audio // = 5
  case audioText // = 6
  case voice // = 7
  case gif // = 8
  case gifText // = 14
  case file // = 9
  case fileText // = 10
  case location // = 11
  case log // = 12
  case contact // = 13
  case UNRECOGNIZED(Int)

  public init() {
    self = .text
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .text
    case 1: self = .image
    case 2: self = .imageText
    case 3: self = .video
    case 4: self = .videoText
    case 5: self = .audio
    case 6: self = .audioText
    case 7: self = .voice
    case 8: self = .gif
    case 9: self = .file
    case 10: self = .fileText
    case 11: self = .location
    case 12: self = .log
    case 13: self = .contact
    case 14: self = .gifText
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .text: return 0
    case .image: return 1
    case .imageText: return 2
    case .video: return 3
    case .videoText: return 4
    case .audio: return 5
    case .audioText: return 6
    case .voice: return 7
    case .gif: return 8
    case .file: return 9
    case .fileText: return 10
    case .location: return 11
    case .log: return 12
    case .contact: return 13
    case .gifText: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPRoomMessageStatus: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case failed // = 0
  case sending // = 1
  case sent // = 2
  case delivered // = 3
  case seen // = 4
  case listened // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .failed
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .failed
    case 1: self = .sending
    case 2: self = .sent
    case 3: self = .delivered
    case 4: self = .seen
    case 5: self = .listened
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .failed: return 0
    case .sending: return 1
    case .sent: return 2
    case .delivered: return 3
    case .seen: return 4
    case .listened: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPRoomMessageReaction: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case thumbsUp // = 0
  case thumbsDown // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .thumbsUp
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .thumbsUp
    case 1: self = .thumbsDown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .thumbsUp: return 0
    case .thumbsDown: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPClientAction: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case cancel // = 0
  case typing // = 1
  case sendingImage // = 2
  case capturingImage // = 3
  case sendingVideo // = 4
  case capturingVideo // = 5
  case sendingAudio // = 6
  case recordingVoice // = 7
  case sendingVoice // = 8
  case sendingDocument // = 9
  case sendingGif // = 10
  case sendingFile // = 11
  case sendingLocation // = 12
  case choosingContact // = 13
  case painting // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .cancel
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .cancel
    case 1: self = .typing
    case 2: self = .sendingImage
    case 3: self = .capturingImage
    case 4: self = .sendingVideo
    case 5: self = .capturingVideo
    case 6: self = .sendingAudio
    case 7: self = .recordingVoice
    case 8: self = .sendingVoice
    case 9: self = .sendingDocument
    case 10: self = .sendingGif
    case 11: self = .sendingFile
    case 12: self = .sendingLocation
    case 13: self = .choosingContact
    case 14: self = .painting
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .cancel: return 0
    case .typing: return 1
    case .sendingImage: return 2
    case .capturingImage: return 3
    case .sendingVideo: return 4
    case .capturingVideo: return 5
    case .sendingAudio: return 6
    case .recordingVoice: return 7
    case .sendingVoice: return 8
    case .sendingDocument: return 9
    case .sendingGif: return 10
    case .sendingFile: return 11
    case .sendingLocation: return 12
    case .choosingContact: return 13
    case .painting: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPPrivacyType: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case userStatus // = 0
  case avatar // = 1
  case groupInvite // = 2
  case channelInvite // = 3
  case voiceCalling // = 4
  case videoCalling // = 5
  case screenSharing // = 6
  case secretChat // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .userStatus
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .userStatus
    case 1: self = .avatar
    case 2: self = .groupInvite
    case 3: self = .channelInvite
    case 4: self = .voiceCalling
    case 5: self = .videoCalling
    case 6: self = .screenSharing
    case 7: self = .secretChat
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .userStatus: return 0
    case .avatar: return 1
    case .groupInvite: return 2
    case .channelInvite: return 3
    case .voiceCalling: return 4
    case .videoCalling: return 5
    case .screenSharing: return 6
    case .secretChat: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public enum IGPPrivacyLevel: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case allowAll // = 0
  case denyAll // = 1
  case allowContacts // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .allowAll
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .allowAll
    case 1: self = .denyAll
    case 2: self = .allowContacts
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .allowAll: return 0
    case .denyAll: return 1
    case .allowContacts: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

public struct IGPRoomMessageLocation: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoomMessageLocation"

  public var igpLat: Double = 0

  public var igpLon: Double = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularDoubleField(value: &self.igpLat)
      case 2: try decoder.decodeSingularDoubleField(value: &self.igpLon)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.igpLat != 0 {
      try visitor.visitSingularDoubleField(value: self.igpLat, fieldNumber: 1)
    }
    if self.igpLon != 0 {
      try visitor.visitSingularDoubleField(value: self.igpLon, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct IGPRoomMessageLog: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoomMessageLog"

  public var igpType: IGPRoomMessageLog.IGPType {
    get {return _storage._igpType}
    set {_uniqueStorage()._igpType = newValue}
  }

  public var igpExtraType: IGPRoomMessageLog.IGPExtraType {
    get {return _storage._igpExtraType}
    set {_uniqueStorage()._igpExtraType = newValue}
  }

  public var igpTargetUser: IGPRoomMessageLog.IGPTargetUser {
    get {return _storage._igpTargetUser ?? IGPRoomMessageLog.IGPTargetUser()}
    set {_uniqueStorage()._igpTargetUser = newValue}
  }
  /// Returns true if `igpTargetUser` has been explicitly set.
  public var hasIgpTargetUser: Bool {return _storage._igpTargetUser != nil}
  /// Clears the value of `igpTargetUser`. Subsequent reads from it will return its default value.
  public mutating func clearIgpTargetUser() {_storage._igpTargetUser = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IGPType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case userJoined // = 0
    case userDeleted // = 1
    case roomCreated // = 2
    case memberAdded // = 3
    case memberKicked // = 4
    case memberLeft // = 5
    case roomConvertedToPublic // = 6
    case roomConvertedToPrivate // = 7
    case memberJoinedByInviteLink // = 8
    case roomDeleted // = 9
    case missedVoiceCall // = 10
    case missedVideoCall // = 11
    case missedScreenShare // = 12
    case missedSecretChat // = 13
    case UNRECOGNIZED(Int)

    public init() {
      self = .userJoined
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .userJoined
      case 1: self = .userDeleted
      case 2: self = .roomCreated
      case 3: self = .memberAdded
      case 4: self = .memberKicked
      case 5: self = .memberLeft
      case 6: self = .roomConvertedToPublic
      case 7: self = .roomConvertedToPrivate
      case 8: self = .memberJoinedByInviteLink
      case 9: self = .roomDeleted
      case 10: self = .missedVoiceCall
      case 11: self = .missedVideoCall
      case 12: self = .missedScreenShare
      case 13: self = .missedSecretChat
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .userJoined: return 0
      case .userDeleted: return 1
      case .roomCreated: return 2
      case .memberAdded: return 3
      case .memberKicked: return 4
      case .memberLeft: return 5
      case .roomConvertedToPublic: return 6
      case .roomConvertedToPrivate: return 7
      case .memberJoinedByInviteLink: return 8
      case .roomDeleted: return 9
      case .missedVoiceCall: return 10
      case .missedVideoCall: return 11
      case .missedScreenShare: return 12
      case .missedSecretChat: return 13
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum IGPExtraType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case noExtra // = 0
    case targetUser // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .noExtra
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noExtra
      case 1: self = .targetUser
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .noExtra: return 0
      case .targetUser: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct IGPTargetUser: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPRoomMessageLog.protoMessageName + ".IGPTargetUser"

    public var igpID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &self.igpID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if self.igpID != 0 {
        try visitor.visitSingularInt64Field(value: self.igpID, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._igpType)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._igpExtraType)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._igpTargetUser)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpType != .userJoined {
        try visitor.visitSingularEnumField(value: _storage._igpType, fieldNumber: 1)
      }
      if _storage._igpExtraType != .noExtra {
        try visitor.visitSingularEnumField(value: _storage._igpExtraType, fieldNumber: 2)
      }
      if let v = _storage._igpTargetUser {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPRoomMessageContact: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoomMessageContact"

  public var igpFirstName: String = String()

  public var igpLastName: String = String()

  public var igpNickname: String = String()

  public var igpPhone: [String] = []

  public var igpEmail: [String] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.igpFirstName)
      case 2: try decoder.decodeSingularStringField(value: &self.igpLastName)
      case 3: try decoder.decodeSingularStringField(value: &self.igpNickname)
      case 4: try decoder.decodeRepeatedStringField(value: &self.igpPhone)
      case 5: try decoder.decodeRepeatedStringField(value: &self.igpEmail)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.igpFirstName.isEmpty {
      try visitor.visitSingularStringField(value: self.igpFirstName, fieldNumber: 1)
    }
    if !self.igpLastName.isEmpty {
      try visitor.visitSingularStringField(value: self.igpLastName, fieldNumber: 2)
    }
    if !self.igpNickname.isEmpty {
      try visitor.visitSingularStringField(value: self.igpNickname, fieldNumber: 3)
    }
    if !self.igpPhone.isEmpty {
      try visitor.visitRepeatedStringField(value: self.igpPhone, fieldNumber: 4)
    }
    if !self.igpEmail.isEmpty {
      try visitor.visitRepeatedStringField(value: self.igpEmail, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct IGPRoomMessageForwardFrom: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoomMessageForwardFrom"

  public var igpRoomID: Int64 = 0

  public var igpMessageID: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.igpRoomID)
      case 2: try decoder.decodeSingularInt64Field(value: &self.igpMessageID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.igpRoomID != 0 {
      try visitor.visitSingularInt64Field(value: self.igpRoomID, fieldNumber: 1)
    }
    if self.igpMessageID != 0 {
      try visitor.visitSingularInt64Field(value: self.igpMessageID, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct IGPRegisteredUser: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRegisteredUser"

  public var igpID: Int64 {
    get {return _storage._igpID}
    set {_uniqueStorage()._igpID = newValue}
  }

  public var igpUsername: String {
    get {return _storage._igpUsername}
    set {_uniqueStorage()._igpUsername = newValue}
  }

  public var igpPhone: Int64 {
    get {return _storage._igpPhone}
    set {_uniqueStorage()._igpPhone = newValue}
  }

  public var igpFirstName: String {
    get {return _storage._igpFirstName}
    set {_uniqueStorage()._igpFirstName = newValue}
  }

  public var igpLastName: String {
    get {return _storage._igpLastName}
    set {_uniqueStorage()._igpLastName = newValue}
  }

  public var igpDisplayName: String {
    get {return _storage._igpDisplayName}
    set {_uniqueStorage()._igpDisplayName = newValue}
  }

  public var igpInitials: String {
    get {return _storage._igpInitials}
    set {_uniqueStorage()._igpInitials = newValue}
  }

  public var igpColor: String {
    get {return _storage._igpColor}
    set {_uniqueStorage()._igpColor = newValue}
  }

  public var igpStatus: IGPRegisteredUser.IGPStatus {
    get {return _storage._igpStatus}
    set {_uniqueStorage()._igpStatus = newValue}
  }

  public var igpLastSeen: Int32 {
    get {return _storage._igpLastSeen}
    set {_uniqueStorage()._igpLastSeen = newValue}
  }

  public var igpAvatarCount: Int32 {
    get {return _storage._igpAvatarCount}
    set {_uniqueStorage()._igpAvatarCount = newValue}
  }

  public var igpAvatar: IGPAvatar {
    get {return _storage._igpAvatar ?? IGPAvatar()}
    set {_uniqueStorage()._igpAvatar = newValue}
  }
  /// Returns true if `igpAvatar` has been explicitly set.
  public var hasIgpAvatar: Bool {return _storage._igpAvatar != nil}
  /// Clears the value of `igpAvatar`. Subsequent reads from it will return its default value.
  public mutating func clearIgpAvatar() {_storage._igpAvatar = nil}

  public var igpMutual: Bool {
    get {return _storage._igpMutual}
    set {_uniqueStorage()._igpMutual = newValue}
  }

  public var igpDeleted: Bool {
    get {return _storage._igpDeleted}
    set {_uniqueStorage()._igpDeleted = newValue}
  }

  public var igpCacheID: String {
    get {return _storage._igpCacheID}
    set {_uniqueStorage()._igpCacheID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IGPStatus: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case longTimeAgo // = 0
    case lastMonth // = 1
    case lastWeek // = 2
    case online // = 3
    case exactly // = 4
    case recently // = 5
    case support // = 6
    case serviceNotifications // = 7
    case UNRECOGNIZED(Int)

    public init() {
      self = .longTimeAgo
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .longTimeAgo
      case 1: self = .lastMonth
      case 2: self = .lastWeek
      case 3: self = .online
      case 4: self = .exactly
      case 5: self = .recently
      case 6: self = .support
      case 7: self = .serviceNotifications
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .longTimeAgo: return 0
      case .lastMonth: return 1
      case .lastWeek: return 2
      case .online: return 3
      case .exactly: return 4
      case .recently: return 5
      case .support: return 6
      case .serviceNotifications: return 7
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._igpID)
        case 2: try decoder.decodeSingularStringField(value: &_storage._igpUsername)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._igpPhone)
        case 4: try decoder.decodeSingularStringField(value: &_storage._igpFirstName)
        case 5: try decoder.decodeSingularStringField(value: &_storage._igpLastName)
        case 6: try decoder.decodeSingularStringField(value: &_storage._igpDisplayName)
        case 7: try decoder.decodeSingularStringField(value: &_storage._igpInitials)
        case 8: try decoder.decodeSingularStringField(value: &_storage._igpColor)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._igpStatus)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._igpLastSeen)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._igpAvatarCount)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._igpAvatar)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._igpMutual)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._igpDeleted)
        case 15: try decoder.decodeSingularStringField(value: &_storage._igpCacheID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpID, fieldNumber: 1)
      }
      if !_storage._igpUsername.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpUsername, fieldNumber: 2)
      }
      if _storage._igpPhone != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpPhone, fieldNumber: 3)
      }
      if !_storage._igpFirstName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpFirstName, fieldNumber: 4)
      }
      if !_storage._igpLastName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpLastName, fieldNumber: 5)
      }
      if !_storage._igpDisplayName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpDisplayName, fieldNumber: 6)
      }
      if !_storage._igpInitials.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpInitials, fieldNumber: 7)
      }
      if !_storage._igpColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpColor, fieldNumber: 8)
      }
      if _storage._igpStatus != .longTimeAgo {
        try visitor.visitSingularEnumField(value: _storage._igpStatus, fieldNumber: 9)
      }
      if _storage._igpLastSeen != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpLastSeen, fieldNumber: 10)
      }
      if _storage._igpAvatarCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpAvatarCount, fieldNumber: 11)
      }
      if let v = _storage._igpAvatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._igpMutual != false {
        try visitor.visitSingularBoolField(value: _storage._igpMutual, fieldNumber: 13)
      }
      if _storage._igpDeleted != false {
        try visitor.visitSingularBoolField(value: _storage._igpDeleted, fieldNumber: 14)
      }
      if !_storage._igpCacheID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpCacheID, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPAvatar: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPAvatar"

  public var igpID: Int64 {
    get {return _storage._igpID}
    set {_uniqueStorage()._igpID = newValue}
  }

  public var igpFile: IGPFile {
    get {return _storage._igpFile ?? IGPFile()}
    set {_uniqueStorage()._igpFile = newValue}
  }
  /// Returns true if `igpFile` has been explicitly set.
  public var hasIgpFile: Bool {return _storage._igpFile != nil}
  /// Clears the value of `igpFile`. Subsequent reads from it will return its default value.
  public mutating func clearIgpFile() {_storage._igpFile = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._igpID)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._igpFile)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpID, fieldNumber: 1)
      }
      if let v = _storage._igpFile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPRoomMessage: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoomMessage"

  public var igpMessageID: Int64 {
    get {return _storage._igpMessageID}
    set {_uniqueStorage()._igpMessageID = newValue}
  }

  public var igpMessageVersion: Int64 {
    get {return _storage._igpMessageVersion}
    set {_uniqueStorage()._igpMessageVersion = newValue}
  }

  public var igpStatus: IGPRoomMessageStatus {
    get {return _storage._igpStatus}
    set {_uniqueStorage()._igpStatus = newValue}
  }

  public var igpStatusVersion: Int64 {
    get {return _storage._igpStatusVersion}
    set {_uniqueStorage()._igpStatusVersion = newValue}
  }

  public var igpMessageType: IGPRoomMessageType {
    get {return _storage._igpMessageType}
    set {_uniqueStorage()._igpMessageType = newValue}
  }

  public var igpMessage: String {
    get {return _storage._igpMessage}
    set {_uniqueStorage()._igpMessage = newValue}
  }

  public var igpAttachment: IGPFile {
    get {return _storage._igpAttachment ?? IGPFile()}
    set {_uniqueStorage()._igpAttachment = newValue}
  }
  /// Returns true if `igpAttachment` has been explicitly set.
  public var hasIgpAttachment: Bool {return _storage._igpAttachment != nil}
  /// Clears the value of `igpAttachment`. Subsequent reads from it will return its default value.
  public mutating func clearIgpAttachment() {_storage._igpAttachment = nil}

  public var igpAuthor: IGPRoomMessage.IGPAuthor {
    get {return _storage._igpAuthor ?? IGPRoomMessage.IGPAuthor()}
    set {_uniqueStorage()._igpAuthor = newValue}
  }
  /// Returns true if `igpAuthor` has been explicitly set.
  public var hasIgpAuthor: Bool {return _storage._igpAuthor != nil}
  /// Clears the value of `igpAuthor`. Subsequent reads from it will return its default value.
  public mutating func clearIgpAuthor() {_storage._igpAuthor = nil}

  public var igpLocation: IGPRoomMessageLocation {
    get {return _storage._igpLocation ?? IGPRoomMessageLocation()}
    set {_uniqueStorage()._igpLocation = newValue}
  }
  /// Returns true if `igpLocation` has been explicitly set.
  public var hasIgpLocation: Bool {return _storage._igpLocation != nil}
  /// Clears the value of `igpLocation`. Subsequent reads from it will return its default value.
  public mutating func clearIgpLocation() {_storage._igpLocation = nil}

  public var igpLog: IGPRoomMessageLog {
    get {return _storage._igpLog ?? IGPRoomMessageLog()}
    set {_uniqueStorage()._igpLog = newValue}
  }
  /// Returns true if `igpLog` has been explicitly set.
  public var hasIgpLog: Bool {return _storage._igpLog != nil}
  /// Clears the value of `igpLog`. Subsequent reads from it will return its default value.
  public mutating func clearIgpLog() {_storage._igpLog = nil}

  public var igpContact: IGPRoomMessageContact {
    get {return _storage._igpContact ?? IGPRoomMessageContact()}
    set {_uniqueStorage()._igpContact = newValue}
  }
  /// Returns true if `igpContact` has been explicitly set.
  public var hasIgpContact: Bool {return _storage._igpContact != nil}
  /// Clears the value of `igpContact`. Subsequent reads from it will return its default value.
  public mutating func clearIgpContact() {_storage._igpContact = nil}

  public var igpEdited: Bool {
    get {return _storage._igpEdited}
    set {_uniqueStorage()._igpEdited = newValue}
  }

  public var igpCreateTime: Int32 {
    get {return _storage._igpCreateTime}
    set {_uniqueStorage()._igpCreateTime = newValue}
  }

  public var igpUpdateTime: Int32 {
    get {return _storage._igpUpdateTime}
    set {_uniqueStorage()._igpUpdateTime = newValue}
  }

  public var igpDeleted: Bool {
    get {return _storage._igpDeleted}
    set {_uniqueStorage()._igpDeleted = newValue}
  }

  public var igpForwardFrom: IGPRoomMessage {
    get {return _storage._igpForwardFrom ?? IGPRoomMessage()}
    set {_uniqueStorage()._igpForwardFrom = newValue}
  }
  /// Returns true if `igpForwardFrom` has been explicitly set.
  public var hasIgpForwardFrom: Bool {return _storage._igpForwardFrom != nil}
  /// Clears the value of `igpForwardFrom`. Subsequent reads from it will return its default value.
  public mutating func clearIgpForwardFrom() {_storage._igpForwardFrom = nil}

  public var igpReplyTo: IGPRoomMessage {
    get {return _storage._igpReplyTo ?? IGPRoomMessage()}
    set {_uniqueStorage()._igpReplyTo = newValue}
  }
  /// Returns true if `igpReplyTo` has been explicitly set.
  public var hasIgpReplyTo: Bool {return _storage._igpReplyTo != nil}
  /// Clears the value of `igpReplyTo`. Subsequent reads from it will return its default value.
  public mutating func clearIgpReplyTo() {_storage._igpReplyTo = nil}

  public var igpPreviousMessageID: Int64 {
    get {return _storage._igpPreviousMessageID}
    set {_uniqueStorage()._igpPreviousMessageID = newValue}
  }

  public var igpExtraType: IGPRoomMessage.IGPExtraType {
    get {return _storage._igpExtraType}
    set {_uniqueStorage()._igpExtraType = newValue}
  }

  public var igpChannelExtra: IGPRoomMessage.IGPChannelExtra {
    get {return _storage._igpChannelExtra ?? IGPRoomMessage.IGPChannelExtra()}
    set {_uniqueStorage()._igpChannelExtra = newValue}
  }
  /// Returns true if `igpChannelExtra` has been explicitly set.
  public var hasIgpChannelExtra: Bool {return _storage._igpChannelExtra != nil}
  /// Clears the value of `igpChannelExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpChannelExtra() {_storage._igpChannelExtra = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IGPExtraType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case noExtra // = 0
    case channelExtra // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .noExtra
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .noExtra
      case 1: self = .channelExtra
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .noExtra: return 0
      case .channelExtra: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct IGPAuthor: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPRoomMessage.protoMessageName + ".IGPAuthor"

    public var igpHash: String {
      get {return _storage._igpHash}
      set {_uniqueStorage()._igpHash = newValue}
    }

    public var igpUser: IGPRoomMessage.IGPAuthor.IGPUser {
      get {return _storage._igpUser ?? IGPRoomMessage.IGPAuthor.IGPUser()}
      set {_uniqueStorage()._igpUser = newValue}
    }
    /// Returns true if `igpUser` has been explicitly set.
    public var hasIgpUser: Bool {return _storage._igpUser != nil}
    /// Clears the value of `igpUser`. Subsequent reads from it will return its default value.
    public mutating func clearIgpUser() {_storage._igpUser = nil}

    public var igpRoom: IGPRoomMessage.IGPAuthor.IGPRoom {
      get {return _storage._igpRoom ?? IGPRoomMessage.IGPAuthor.IGPRoom()}
      set {_uniqueStorage()._igpRoom = newValue}
    }
    /// Returns true if `igpRoom` has been explicitly set.
    public var hasIgpRoom: Bool {return _storage._igpRoom != nil}
    /// Clears the value of `igpRoom`. Subsequent reads from it will return its default value.
    public mutating func clearIgpRoom() {_storage._igpRoom = nil}

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public struct IGPUser: SwiftProtobuf.Message {
      public static let protoMessageName: String = IGPRoomMessage.IGPAuthor.protoMessageName + ".IGPUser"

      public var igpUserID: Int64 = 0

      public var igpCacheID: String = String()

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt64Field(value: &self.igpUserID)
          case 2: try decoder.decodeSingularStringField(value: &self.igpCacheID)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.igpUserID != 0 {
          try visitor.visitSingularInt64Field(value: self.igpUserID, fieldNumber: 1)
        }
        if !self.igpCacheID.isEmpty {
          try visitor.visitSingularStringField(value: self.igpCacheID, fieldNumber: 2)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public struct IGPRoom: SwiftProtobuf.Message {
      public static let protoMessageName: String = IGPRoomMessage.IGPAuthor.protoMessageName + ".IGPRoom"

      public var igpRoomID: Int64 = 0

      public var unknownFields = SwiftProtobuf.UnknownStorage()

      public init() {}

      /// Used by the decoding initializers in the SwiftProtobuf library, not generally
      /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
      /// initializers are defined in the SwiftProtobuf library. See the Message and
      /// Message+*Additions` files.
      public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularInt64Field(value: &self.igpRoomID)
          default: break
          }
        }
      }

      /// Used by the encoding methods of the SwiftProtobuf library, not generally
      /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
      /// other serializer methods are defined in the SwiftProtobuf library. See the
      /// `Message` and `Message+*Additions` files.
      public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
        if self.igpRoomID != 0 {
          try visitor.visitSingularInt64Field(value: self.igpRoomID, fieldNumber: 1)
        }
        try unknownFields.traverse(visitor: &visitor)
      }
    }

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      _ = _uniqueStorage()
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        while let fieldNumber = try decoder.nextFieldNumber() {
          switch fieldNumber {
          case 1: try decoder.decodeSingularStringField(value: &_storage._igpHash)
          case 2: try decoder.decodeSingularMessageField(value: &_storage._igpUser)
          case 3: try decoder.decodeSingularMessageField(value: &_storage._igpRoom)
          default: break
          }
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
        if !_storage._igpHash.isEmpty {
          try visitor.visitSingularStringField(value: _storage._igpHash, fieldNumber: 1)
        }
        if let v = _storage._igpUser {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
        }
        if let v = _storage._igpRoom {
          try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
        }
      }
      try unknownFields.traverse(visitor: &visitor)
    }

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  public struct IGPChannelExtra: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPRoomMessage.protoMessageName + ".IGPChannelExtra"

    public var igpSignature: String = String()

    public var igpViewsLabel: String = String()

    public var igpThumbsUpLabel: String = String()

    public var igpThumbsDownLabel: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpSignature)
        case 2: try decoder.decodeSingularStringField(value: &self.igpViewsLabel)
        case 3: try decoder.decodeSingularStringField(value: &self.igpThumbsUpLabel)
        case 4: try decoder.decodeSingularStringField(value: &self.igpThumbsDownLabel)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpSignature.isEmpty {
        try visitor.visitSingularStringField(value: self.igpSignature, fieldNumber: 1)
      }
      if !self.igpViewsLabel.isEmpty {
        try visitor.visitSingularStringField(value: self.igpViewsLabel, fieldNumber: 2)
      }
      if !self.igpThumbsUpLabel.isEmpty {
        try visitor.visitSingularStringField(value: self.igpThumbsUpLabel, fieldNumber: 3)
      }
      if !self.igpThumbsDownLabel.isEmpty {
        try visitor.visitSingularStringField(value: self.igpThumbsDownLabel, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._igpMessageID)
        case 2: try decoder.decodeSingularInt64Field(value: &_storage._igpMessageVersion)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._igpStatus)
        case 4: try decoder.decodeSingularInt64Field(value: &_storage._igpStatusVersion)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._igpMessageType)
        case 6: try decoder.decodeSingularStringField(value: &_storage._igpMessage)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._igpAttachment)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._igpAuthor)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._igpLocation)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._igpLog)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._igpContact)
        case 12: try decoder.decodeSingularBoolField(value: &_storage._igpEdited)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._igpCreateTime)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._igpUpdateTime)
        case 15: try decoder.decodeSingularBoolField(value: &_storage._igpDeleted)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._igpForwardFrom)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._igpReplyTo)
        case 18: try decoder.decodeSingularInt64Field(value: &_storage._igpPreviousMessageID)
        case 19: try decoder.decodeSingularEnumField(value: &_storage._igpExtraType)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._igpChannelExtra)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpMessageID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpMessageID, fieldNumber: 1)
      }
      if _storage._igpMessageVersion != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpMessageVersion, fieldNumber: 2)
      }
      if _storage._igpStatus != .failed {
        try visitor.visitSingularEnumField(value: _storage._igpStatus, fieldNumber: 3)
      }
      if _storage._igpStatusVersion != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpStatusVersion, fieldNumber: 4)
      }
      if _storage._igpMessageType != .text {
        try visitor.visitSingularEnumField(value: _storage._igpMessageType, fieldNumber: 5)
      }
      if !_storage._igpMessage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpMessage, fieldNumber: 6)
      }
      if let v = _storage._igpAttachment {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._igpAuthor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._igpLocation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._igpLog {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._igpContact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if _storage._igpEdited != false {
        try visitor.visitSingularBoolField(value: _storage._igpEdited, fieldNumber: 12)
      }
      if _storage._igpCreateTime != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpCreateTime, fieldNumber: 13)
      }
      if _storage._igpUpdateTime != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpUpdateTime, fieldNumber: 14)
      }
      if _storage._igpDeleted != false {
        try visitor.visitSingularBoolField(value: _storage._igpDeleted, fieldNumber: 15)
      }
      if let v = _storage._igpForwardFrom {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._igpReplyTo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if _storage._igpPreviousMessageID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpPreviousMessageID, fieldNumber: 18)
      }
      if _storage._igpExtraType != .noExtra {
        try visitor.visitSingularEnumField(value: _storage._igpExtraType, fieldNumber: 19)
      }
      if let v = _storage._igpChannelExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPRoomDraft: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoomDraft"

  public var igpMessage: String = String()

  public var igpReplyTo: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.igpMessage)
      case 2: try decoder.decodeSingularInt64Field(value: &self.igpReplyTo)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.igpMessage.isEmpty {
      try visitor.visitSingularStringField(value: self.igpMessage, fieldNumber: 1)
    }
    if self.igpReplyTo != 0 {
      try visitor.visitSingularInt64Field(value: self.igpReplyTo, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct IGPRoom: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPRoom"

  public var igpID: Int64 {
    get {return _storage._igpID}
    set {_uniqueStorage()._igpID = newValue}
  }

  public var igpType: IGPRoom.IGPType {
    get {return _storage._igpType}
    set {_uniqueStorage()._igpType = newValue}
  }

  public var igpTitle: String {
    get {return _storage._igpTitle}
    set {_uniqueStorage()._igpTitle = newValue}
  }

  public var igpInitials: String {
    get {return _storage._igpInitials}
    set {_uniqueStorage()._igpInitials = newValue}
  }

  public var igpColor: String {
    get {return _storage._igpColor}
    set {_uniqueStorage()._igpColor = newValue}
  }

  public var igpUnreadCount: Int32 {
    get {return _storage._igpUnreadCount}
    set {_uniqueStorage()._igpUnreadCount = newValue}
  }

  public var igpLastMessage: IGPRoomMessage {
    get {return _storage._igpLastMessage ?? IGPRoomMessage()}
    set {_uniqueStorage()._igpLastMessage = newValue}
  }
  /// Returns true if `igpLastMessage` has been explicitly set.
  public var hasIgpLastMessage: Bool {return _storage._igpLastMessage != nil}
  /// Clears the value of `igpLastMessage`. Subsequent reads from it will return its default value.
  public mutating func clearIgpLastMessage() {_storage._igpLastMessage = nil}

  public var igpReadOnly: Bool {
    get {return _storage._igpReadOnly}
    set {_uniqueStorage()._igpReadOnly = newValue}
  }

  public var igpIsParticipant: Bool {
    get {return _storage._igpIsParticipant}
    set {_uniqueStorage()._igpIsParticipant = newValue}
  }

  public var igpDraft: IGPRoomDraft {
    get {return _storage._igpDraft ?? IGPRoomDraft()}
    set {_uniqueStorage()._igpDraft = newValue}
  }
  /// Returns true if `igpDraft` has been explicitly set.
  public var hasIgpDraft: Bool {return _storage._igpDraft != nil}
  /// Clears the value of `igpDraft`. Subsequent reads from it will return its default value.
  public mutating func clearIgpDraft() {_storage._igpDraft = nil}

  public var igpFirstUnreadMessage: IGPRoomMessage {
    get {return _storage._igpFirstUnreadMessage ?? IGPRoomMessage()}
    set {_uniqueStorage()._igpFirstUnreadMessage = newValue}
  }
  /// Returns true if `igpFirstUnreadMessage` has been explicitly set.
  public var hasIgpFirstUnreadMessage: Bool {return _storage._igpFirstUnreadMessage != nil}
  /// Clears the value of `igpFirstUnreadMessage`. Subsequent reads from it will return its default value.
  public mutating func clearIgpFirstUnreadMessage() {_storage._igpFirstUnreadMessage = nil}

  public var igpChatRoomExtra: IGPChatRoom {
    get {return _storage._igpChatRoomExtra ?? IGPChatRoom()}
    set {_uniqueStorage()._igpChatRoomExtra = newValue}
  }
  /// Returns true if `igpChatRoomExtra` has been explicitly set.
  public var hasIgpChatRoomExtra: Bool {return _storage._igpChatRoomExtra != nil}
  /// Clears the value of `igpChatRoomExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpChatRoomExtra() {_storage._igpChatRoomExtra = nil}

  public var igpGroupRoomExtra: IGPGroupRoom {
    get {return _storage._igpGroupRoomExtra ?? IGPGroupRoom()}
    set {_uniqueStorage()._igpGroupRoomExtra = newValue}
  }
  /// Returns true if `igpGroupRoomExtra` has been explicitly set.
  public var hasIgpGroupRoomExtra: Bool {return _storage._igpGroupRoomExtra != nil}
  /// Clears the value of `igpGroupRoomExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpGroupRoomExtra() {_storage._igpGroupRoomExtra = nil}

  public var igpChannelRoomExtra: IGPChannelRoom {
    get {return _storage._igpChannelRoomExtra ?? IGPChannelRoom()}
    set {_uniqueStorage()._igpChannelRoomExtra = newValue}
  }
  /// Returns true if `igpChannelRoomExtra` has been explicitly set.
  public var hasIgpChannelRoomExtra: Bool {return _storage._igpChannelRoomExtra != nil}
  /// Clears the value of `igpChannelRoomExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpChannelRoomExtra() {_storage._igpChannelRoomExtra = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IGPType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case chat // = 0
    case group // = 1
    case channel // = 2
    case UNRECOGNIZED(Int)

    public init() {
      self = .chat
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .chat
      case 1: self = .group
      case 2: self = .channel
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .chat: return 0
      case .group: return 1
      case .channel: return 2
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularInt64Field(value: &_storage._igpID)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._igpType)
        case 3: try decoder.decodeSingularStringField(value: &_storage._igpTitle)
        case 4: try decoder.decodeSingularStringField(value: &_storage._igpInitials)
        case 5: try decoder.decodeSingularStringField(value: &_storage._igpColor)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._igpUnreadCount)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._igpLastMessage)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._igpReadOnly)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._igpIsParticipant)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._igpDraft)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._igpChatRoomExtra)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._igpGroupRoomExtra)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._igpChannelRoomExtra)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._igpFirstUnreadMessage)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpID, fieldNumber: 1)
      }
      if _storage._igpType != .chat {
        try visitor.visitSingularEnumField(value: _storage._igpType, fieldNumber: 2)
      }
      if !_storage._igpTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpTitle, fieldNumber: 3)
      }
      if !_storage._igpInitials.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpInitials, fieldNumber: 4)
      }
      if !_storage._igpColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpColor, fieldNumber: 5)
      }
      if _storage._igpUnreadCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpUnreadCount, fieldNumber: 6)
      }
      if let v = _storage._igpLastMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._igpReadOnly != false {
        try visitor.visitSingularBoolField(value: _storage._igpReadOnly, fieldNumber: 8)
      }
      if _storage._igpIsParticipant != false {
        try visitor.visitSingularBoolField(value: _storage._igpIsParticipant, fieldNumber: 9)
      }
      if let v = _storage._igpDraft {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._igpChatRoomExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._igpGroupRoomExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._igpChannelRoomExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._igpFirstUnreadMessage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPChatRoom: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPChatRoom"

  public var igpPeer: IGPRegisteredUser {
    get {return _storage._igpPeer ?? IGPRegisteredUser()}
    set {_uniqueStorage()._igpPeer = newValue}
  }
  /// Returns true if `igpPeer` has been explicitly set.
  public var hasIgpPeer: Bool {return _storage._igpPeer != nil}
  /// Clears the value of `igpPeer`. Subsequent reads from it will return its default value.
  public mutating func clearIgpPeer() {_storage._igpPeer = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpPeer)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpPeer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPGroupRoom: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPGroupRoom"

  public var igpType: IGPGroupRoom.IGPType {
    get {return _storage._igpType}
    set {_uniqueStorage()._igpType = newValue}
  }

  public var igpRole: IGPGroupRoom.IGPRole {
    get {return _storage._igpRole}
    set {_uniqueStorage()._igpRole = newValue}
  }

  public var igpParticipantsCount: Int32 {
    get {return _storage._igpParticipantsCount}
    set {_uniqueStorage()._igpParticipantsCount = newValue}
  }

  public var igpParticipantsCountLabel: String {
    get {return _storage._igpParticipantsCountLabel}
    set {_uniqueStorage()._igpParticipantsCountLabel = newValue}
  }

  public var igpParticipantsCountLimit: Int32 {
    get {return _storage._igpParticipantsCountLimit}
    set {_uniqueStorage()._igpParticipantsCountLimit = newValue}
  }

  public var igpParticipantsCountLimitLabel: String {
    get {return _storage._igpParticipantsCountLimitLabel}
    set {_uniqueStorage()._igpParticipantsCountLimitLabel = newValue}
  }

  public var igpDescription: String {
    get {return _storage._igpDescription}
    set {_uniqueStorage()._igpDescription = newValue}
  }

  public var igpAvatarCount: Int32 {
    get {return _storage._igpAvatarCount}
    set {_uniqueStorage()._igpAvatarCount = newValue}
  }

  public var igpAvatar: IGPAvatar {
    get {return _storage._igpAvatar ?? IGPAvatar()}
    set {_uniqueStorage()._igpAvatar = newValue}
  }
  /// Returns true if `igpAvatar` has been explicitly set.
  public var hasIgpAvatar: Bool {return _storage._igpAvatar != nil}
  /// Clears the value of `igpAvatar`. Subsequent reads from it will return its default value.
  public mutating func clearIgpAvatar() {_storage._igpAvatar = nil}

  public var igpPrivateExtra: IGPGroupRoom.IGPPrivateExtra {
    get {return _storage._igpPrivateExtra ?? IGPGroupRoom.IGPPrivateExtra()}
    set {_uniqueStorage()._igpPrivateExtra = newValue}
  }
  /// Returns true if `igpPrivateExtra` has been explicitly set.
  public var hasIgpPrivateExtra: Bool {return _storage._igpPrivateExtra != nil}
  /// Clears the value of `igpPrivateExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpPrivateExtra() {_storage._igpPrivateExtra = nil}

  public var igpPublicExtra: IGPGroupRoom.IGPPublicExtra {
    get {return _storage._igpPublicExtra ?? IGPGroupRoom.IGPPublicExtra()}
    set {_uniqueStorage()._igpPublicExtra = newValue}
  }
  /// Returns true if `igpPublicExtra` has been explicitly set.
  public var hasIgpPublicExtra: Bool {return _storage._igpPublicExtra != nil}
  /// Clears the value of `igpPublicExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpPublicExtra() {_storage._igpPublicExtra = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IGPType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case privateRoom // = 0
    case publicRoom // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .privateRoom
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .privateRoom
      case 1: self = .publicRoom
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .privateRoom: return 0
      case .publicRoom: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum IGPRole: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case member // = 0
    case moderator // = 1
    case admin // = 2
    case owner // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .member
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .member
      case 1: self = .moderator
      case 2: self = .admin
      case 3: self = .owner
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .member: return 0
      case .moderator: return 1
      case .admin: return 2
      case .owner: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct IGPPrivateExtra: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPGroupRoom.protoMessageName + ".IGPPrivateExtra"

    public var igpInviteLink: String = String()

    public var igpInviteToken: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpInviteLink)
        case 2: try decoder.decodeSingularStringField(value: &self.igpInviteToken)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpInviteLink.isEmpty {
        try visitor.visitSingularStringField(value: self.igpInviteLink, fieldNumber: 1)
      }
      if !self.igpInviteToken.isEmpty {
        try visitor.visitSingularStringField(value: self.igpInviteToken, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public struct IGPPublicExtra: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPGroupRoom.protoMessageName + ".IGPPublicExtra"

    public var igpUsername: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpUsername)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpUsername.isEmpty {
        try visitor.visitSingularStringField(value: self.igpUsername, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._igpType)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._igpRole)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._igpParticipantsCount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._igpParticipantsCountLabel)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._igpParticipantsCountLimit)
        case 6: try decoder.decodeSingularStringField(value: &_storage._igpParticipantsCountLimitLabel)
        case 7: try decoder.decodeSingularStringField(value: &_storage._igpDescription)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._igpAvatarCount)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._igpAvatar)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._igpPrivateExtra)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._igpPublicExtra)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpType != .privateRoom {
        try visitor.visitSingularEnumField(value: _storage._igpType, fieldNumber: 1)
      }
      if _storage._igpRole != .member {
        try visitor.visitSingularEnumField(value: _storage._igpRole, fieldNumber: 2)
      }
      if _storage._igpParticipantsCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpParticipantsCount, fieldNumber: 3)
      }
      if !_storage._igpParticipantsCountLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpParticipantsCountLabel, fieldNumber: 4)
      }
      if _storage._igpParticipantsCountLimit != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpParticipantsCountLimit, fieldNumber: 5)
      }
      if !_storage._igpParticipantsCountLimitLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpParticipantsCountLimitLabel, fieldNumber: 6)
      }
      if !_storage._igpDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpDescription, fieldNumber: 7)
      }
      if _storage._igpAvatarCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpAvatarCount, fieldNumber: 8)
      }
      if let v = _storage._igpAvatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._igpPrivateExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._igpPublicExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPChannelRoom: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPChannelRoom"

  public var igpType: IGPChannelRoom.IGPType {
    get {return _storage._igpType}
    set {_uniqueStorage()._igpType = newValue}
  }

  public var igpRole: IGPChannelRoom.IGPRole {
    get {return _storage._igpRole}
    set {_uniqueStorage()._igpRole = newValue}
  }

  public var igpParticipantsCount: Int32 {
    get {return _storage._igpParticipantsCount}
    set {_uniqueStorage()._igpParticipantsCount = newValue}
  }

  public var igpParticipantsCountLabel: String {
    get {return _storage._igpParticipantsCountLabel}
    set {_uniqueStorage()._igpParticipantsCountLabel = newValue}
  }

  public var igpDescription: String {
    get {return _storage._igpDescription}
    set {_uniqueStorage()._igpDescription = newValue}
  }

  public var igpAvatarCount: Int32 {
    get {return _storage._igpAvatarCount}
    set {_uniqueStorage()._igpAvatarCount = newValue}
  }

  public var igpAvatar: IGPAvatar {
    get {return _storage._igpAvatar ?? IGPAvatar()}
    set {_uniqueStorage()._igpAvatar = newValue}
  }
  /// Returns true if `igpAvatar` has been explicitly set.
  public var hasIgpAvatar: Bool {return _storage._igpAvatar != nil}
  /// Clears the value of `igpAvatar`. Subsequent reads from it will return its default value.
  public mutating func clearIgpAvatar() {_storage._igpAvatar = nil}

  public var igpPrivateExtra: IGPChannelRoom.IGPPrivateExtra {
    get {return _storage._igpPrivateExtra ?? IGPChannelRoom.IGPPrivateExtra()}
    set {_uniqueStorage()._igpPrivateExtra = newValue}
  }
  /// Returns true if `igpPrivateExtra` has been explicitly set.
  public var hasIgpPrivateExtra: Bool {return _storage._igpPrivateExtra != nil}
  /// Clears the value of `igpPrivateExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpPrivateExtra() {_storage._igpPrivateExtra = nil}

  public var igpPublicExtra: IGPChannelRoom.IGPPublicExtra {
    get {return _storage._igpPublicExtra ?? IGPChannelRoom.IGPPublicExtra()}
    set {_uniqueStorage()._igpPublicExtra = newValue}
  }
  /// Returns true if `igpPublicExtra` has been explicitly set.
  public var hasIgpPublicExtra: Bool {return _storage._igpPublicExtra != nil}
  /// Clears the value of `igpPublicExtra`. Subsequent reads from it will return its default value.
  public mutating func clearIgpPublicExtra() {_storage._igpPublicExtra = nil}

  public var igpSignature: Bool {
    get {return _storage._igpSignature}
    set {_uniqueStorage()._igpSignature = newValue}
  }

  public var igpSeenID: Int64 {
    get {return _storage._igpSeenID}
    set {_uniqueStorage()._igpSeenID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public enum IGPType: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case privateRoom // = 0
    case publicRoom // = 1
    case UNRECOGNIZED(Int)

    public init() {
      self = .privateRoom
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .privateRoom
      case 1: self = .publicRoom
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .privateRoom: return 0
      case .publicRoom: return 1
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public enum IGPRole: SwiftProtobuf.Enum {
    public typealias RawValue = Int
    case member // = 0
    case moderator // = 1
    case admin // = 2
    case owner // = 3
    case UNRECOGNIZED(Int)

    public init() {
      self = .member
    }

    public init?(rawValue: Int) {
      switch rawValue {
      case 0: self = .member
      case 1: self = .moderator
      case 2: self = .admin
      case 3: self = .owner
      default: self = .UNRECOGNIZED(rawValue)
      }
    }

    public var rawValue: Int {
      switch self {
      case .member: return 0
      case .moderator: return 1
      case .admin: return 2
      case .owner: return 3
      case .UNRECOGNIZED(let i): return i
      }
    }

  }

  public struct IGPPrivateExtra: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPChannelRoom.protoMessageName + ".IGPPrivateExtra"

    public var igpInviteLink: String = String()

    public var igpInviteToken: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpInviteLink)
        case 2: try decoder.decodeSingularStringField(value: &self.igpInviteToken)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpInviteLink.isEmpty {
        try visitor.visitSingularStringField(value: self.igpInviteLink, fieldNumber: 1)
      }
      if !self.igpInviteToken.isEmpty {
        try visitor.visitSingularStringField(value: self.igpInviteToken, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public struct IGPPublicExtra: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPChannelRoom.protoMessageName + ".IGPPublicExtra"

    public var igpUsername: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpUsername)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpUsername.isEmpty {
        try visitor.visitSingularStringField(value: self.igpUsername, fieldNumber: 1)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._igpType)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._igpRole)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._igpParticipantsCount)
        case 4: try decoder.decodeSingularStringField(value: &_storage._igpParticipantsCountLabel)
        case 5: try decoder.decodeSingularStringField(value: &_storage._igpDescription)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._igpAvatarCount)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._igpAvatar)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._igpPrivateExtra)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._igpPublicExtra)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._igpSignature)
        case 11: try decoder.decodeSingularInt64Field(value: &_storage._igpSeenID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._igpType != .privateRoom {
        try visitor.visitSingularEnumField(value: _storage._igpType, fieldNumber: 1)
      }
      if _storage._igpRole != .member {
        try visitor.visitSingularEnumField(value: _storage._igpRole, fieldNumber: 2)
      }
      if _storage._igpParticipantsCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpParticipantsCount, fieldNumber: 3)
      }
      if !_storage._igpParticipantsCountLabel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpParticipantsCountLabel, fieldNumber: 4)
      }
      if !_storage._igpDescription.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpDescription, fieldNumber: 5)
      }
      if _storage._igpAvatarCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpAvatarCount, fieldNumber: 6)
      }
      if let v = _storage._igpAvatar {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._igpPrivateExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._igpPublicExtra {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._igpSignature != false {
        try visitor.visitSingularBoolField(value: _storage._igpSignature, fieldNumber: 10)
      }
      if _storage._igpSeenID != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpSeenID, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPThumbnail: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPThumbnail"

  public var igpSize: Int64 = 0

  public var igpWidth: Int32 = 0

  public var igpHeight: Int32 = 0

  public var igpCacheID: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.igpSize)
      case 2: try decoder.decodeSingularInt32Field(value: &self.igpWidth)
      case 3: try decoder.decodeSingularInt32Field(value: &self.igpHeight)
      case 4: try decoder.decodeSingularStringField(value: &self.igpCacheID)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.igpSize != 0 {
      try visitor.visitSingularInt64Field(value: self.igpSize, fieldNumber: 1)
    }
    if self.igpWidth != 0 {
      try visitor.visitSingularInt32Field(value: self.igpWidth, fieldNumber: 2)
    }
    if self.igpHeight != 0 {
      try visitor.visitSingularInt32Field(value: self.igpHeight, fieldNumber: 3)
    }
    if !self.igpCacheID.isEmpty {
      try visitor.visitSingularStringField(value: self.igpCacheID, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

public struct IGPFile: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPFile"

  public var igpToken: String {
    get {return _storage._igpToken}
    set {_uniqueStorage()._igpToken = newValue}
  }

  public var igpName: String {
    get {return _storage._igpName}
    set {_uniqueStorage()._igpName = newValue}
  }

  public var igpSize: Int64 {
    get {return _storage._igpSize}
    set {_uniqueStorage()._igpSize = newValue}
  }

  public var igpLargeThumbnail: IGPThumbnail {
    get {return _storage._igpLargeThumbnail ?? IGPThumbnail()}
    set {_uniqueStorage()._igpLargeThumbnail = newValue}
  }
  /// Returns true if `igpLargeThumbnail` has been explicitly set.
  public var hasIgpLargeThumbnail: Bool {return _storage._igpLargeThumbnail != nil}
  /// Clears the value of `igpLargeThumbnail`. Subsequent reads from it will return its default value.
  public mutating func clearIgpLargeThumbnail() {_storage._igpLargeThumbnail = nil}

  public var igpSmallThumbnail: IGPThumbnail {
    get {return _storage._igpSmallThumbnail ?? IGPThumbnail()}
    set {_uniqueStorage()._igpSmallThumbnail = newValue}
  }
  /// Returns true if `igpSmallThumbnail` has been explicitly set.
  public var hasIgpSmallThumbnail: Bool {return _storage._igpSmallThumbnail != nil}
  /// Clears the value of `igpSmallThumbnail`. Subsequent reads from it will return its default value.
  public mutating func clearIgpSmallThumbnail() {_storage._igpSmallThumbnail = nil}

  public var igpWaveformThumbnail: IGPThumbnail {
    get {return _storage._igpWaveformThumbnail ?? IGPThumbnail()}
    set {_uniqueStorage()._igpWaveformThumbnail = newValue}
  }
  /// Returns true if `igpWaveformThumbnail` has been explicitly set.
  public var hasIgpWaveformThumbnail: Bool {return _storage._igpWaveformThumbnail != nil}
  /// Clears the value of `igpWaveformThumbnail`. Subsequent reads from it will return its default value.
  public mutating func clearIgpWaveformThumbnail() {_storage._igpWaveformThumbnail = nil}

  public var igpWidth: Int32 {
    get {return _storage._igpWidth}
    set {_uniqueStorage()._igpWidth = newValue}
  }

  public var igpHeight: Int32 {
    get {return _storage._igpHeight}
    set {_uniqueStorage()._igpHeight = newValue}
  }

  public var igpDuration: Double {
    get {return _storage._igpDuration}
    set {_uniqueStorage()._igpDuration = newValue}
  }

  public var igpCacheID: String {
    get {return _storage._igpCacheID}
    set {_uniqueStorage()._igpCacheID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &_storage._igpToken)
        case 2: try decoder.decodeSingularStringField(value: &_storage._igpName)
        case 3: try decoder.decodeSingularInt64Field(value: &_storage._igpSize)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._igpLargeThumbnail)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._igpSmallThumbnail)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._igpWaveformThumbnail)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._igpWidth)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._igpHeight)
        case 9: try decoder.decodeSingularDoubleField(value: &_storage._igpDuration)
        case 10: try decoder.decodeSingularStringField(value: &_storage._igpCacheID)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !_storage._igpToken.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpToken, fieldNumber: 1)
      }
      if !_storage._igpName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpName, fieldNumber: 2)
      }
      if _storage._igpSize != 0 {
        try visitor.visitSingularInt64Field(value: _storage._igpSize, fieldNumber: 3)
      }
      if let v = _storage._igpLargeThumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._igpSmallThumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._igpWaveformThumbnail {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._igpWidth != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpWidth, fieldNumber: 7)
      }
      if _storage._igpHeight != 0 {
        try visitor.visitSingularInt32Field(value: _storage._igpHeight, fieldNumber: 8)
      }
      if _storage._igpDuration != 0 {
        try visitor.visitSingularDoubleField(value: _storage._igpDuration, fieldNumber: 9)
      }
      if !_storage._igpCacheID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpCacheID, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPWallpaper: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPWallpaper"

  public var igpFile: IGPFile {
    get {return _storage._igpFile ?? IGPFile()}
    set {_uniqueStorage()._igpFile = newValue}
  }
  /// Returns true if `igpFile` has been explicitly set.
  public var hasIgpFile: Bool {return _storage._igpFile != nil}
  /// Clears the value of `igpFile`. Subsequent reads from it will return its default value.
  public mutating func clearIgpFile() {_storage._igpFile = nil}

  public var igpColor: String {
    get {return _storage._igpColor}
    set {_uniqueStorage()._igpColor = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpFile)
        case 2: try decoder.decodeSingularStringField(value: &_storage._igpColor)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpFile {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._igpColor.isEmpty {
        try visitor.visitSingularStringField(value: _storage._igpColor, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPPagination: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPPagination"

  public var igpOffset: Int32 = 0

  public var igpLimit: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt32Field(value: &self.igpOffset)
      case 2: try decoder.decodeSingularInt32Field(value: &self.igpLimit)
      default: break
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.igpOffset != 0 {
      try visitor.visitSingularInt32Field(value: self.igpOffset, fieldNumber: 1)
    }
    if self.igpLimit != 0 {
      try visitor.visitSingularInt32Field(value: self.igpLimit, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IGPGender: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
  ]
}

extension IGPDevice: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_DEVICE"),
    1: .same(proto: "PC"),
    2: .same(proto: "TABLET"),
    3: .same(proto: "MOBILE"),
  ]
}

extension IGPPlatform: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "UNKNOWN_PLATFORM"),
    1: .same(proto: "ANDROID"),
    2: .same(proto: "IOS"),
    3: .same(proto: "MAC_OS"),
    4: .same(proto: "WINDOWS"),
    5: .same(proto: "LINUX"),
    6: .same(proto: "BLACK_BERRY"),
  ]
}

extension IGPLanguage: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EN_US"),
    1: .same(proto: "FA_IR"),
  ]
}

extension IGPRoomMessageType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TEXT"),
    1: .same(proto: "IMAGE"),
    2: .same(proto: "IMAGE_TEXT"),
    3: .same(proto: "VIDEO"),
    4: .same(proto: "VIDEO_TEXT"),
    5: .same(proto: "AUDIO"),
    6: .same(proto: "AUDIO_TEXT"),
    7: .same(proto: "VOICE"),
    8: .same(proto: "GIF"),
    9: .same(proto: "FILE"),
    10: .same(proto: "FILE_TEXT"),
    11: .same(proto: "LOCATION"),
    12: .same(proto: "LOG"),
    13: .same(proto: "CONTACT"),
    14: .same(proto: "GIF_TEXT"),
  ]
}

extension IGPRoomMessageStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FAILED"),
    1: .same(proto: "SENDING"),
    2: .same(proto: "SENT"),
    3: .same(proto: "DELIVERED"),
    4: .same(proto: "SEEN"),
    5: .same(proto: "LISTENED"),
  ]
}

extension IGPRoomMessageReaction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "THUMBS_UP"),
    1: .same(proto: "THUMBS_DOWN"),
  ]
}

extension IGPClientAction: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CANCEL"),
    1: .same(proto: "TYPING"),
    2: .same(proto: "SENDING_IMAGE"),
    3: .same(proto: "CAPTURING_IMAGE"),
    4: .same(proto: "SENDING_VIDEO"),
    5: .same(proto: "CAPTURING_VIDEO"),
    6: .same(proto: "SENDING_AUDIO"),
    7: .same(proto: "RECORDING_VOICE"),
    8: .same(proto: "SENDING_VOICE"),
    9: .same(proto: "SENDING_DOCUMENT"),
    10: .same(proto: "SENDING_GIF"),
    11: .same(proto: "SENDING_FILE"),
    12: .same(proto: "SENDING_LOCATION"),
    13: .same(proto: "CHOOSING_CONTACT"),
    14: .same(proto: "PAINTING"),
  ]
}

extension IGPPrivacyType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_STATUS"),
    1: .same(proto: "AVATAR"),
    2: .same(proto: "GROUP_INVITE"),
    3: .same(proto: "CHANNEL_INVITE"),
    4: .same(proto: "VOICE_CALLING"),
    5: .same(proto: "VIDEO_CALLING"),
    6: .same(proto: "SCREEN_SHARING"),
    7: .same(proto: "SECRET_CHAT"),
  ]
}

extension IGPPrivacyLevel: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ALLOW_ALL"),
    1: .same(proto: "DENY_ALL"),
    2: .same(proto: "ALLOW_CONTACTS"),
  ]
}

extension IGPRoomMessageLocation: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_lat"),
    2: .standard(proto: "IGP_lon"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessageLocation) -> Bool {
    if self.igpLat != other.igpLat {return false}
    if self.igpLon != other.igpLon {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessageLog: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_type"),
    2: .standard(proto: "IGP_extra_type"),
    3: .standard(proto: "IGP_target_user"),
  ]

  fileprivate class _StorageClass {
    var _igpType: IGPRoomMessageLog.IGPType = .userJoined
    var _igpExtraType: IGPRoomMessageLog.IGPExtraType = .noExtra
    var _igpTargetUser: IGPRoomMessageLog.IGPTargetUser? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpType = source._igpType
      _igpExtraType = source._igpExtraType
      _igpTargetUser = source._igpTargetUser
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessageLog) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpType != other_storage._igpType {return false}
        if _storage._igpExtraType != other_storage._igpExtraType {return false}
        if _storage._igpTargetUser != other_storage._igpTargetUser {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessageLog.IGPType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_JOINED"),
    1: .same(proto: "USER_DELETED"),
    2: .same(proto: "ROOM_CREATED"),
    3: .same(proto: "MEMBER_ADDED"),
    4: .same(proto: "MEMBER_KICKED"),
    5: .same(proto: "MEMBER_LEFT"),
    6: .same(proto: "ROOM_CONVERTED_TO_PUBLIC"),
    7: .same(proto: "ROOM_CONVERTED_TO_PRIVATE"),
    8: .same(proto: "MEMBER_JOINED_BY_INVITE_LINK"),
    9: .same(proto: "ROOM_DELETED"),
    10: .same(proto: "MISSED_VOICE_CALL"),
    11: .same(proto: "MISSED_VIDEO_CALL"),
    12: .same(proto: "MISSED_SCREEN_SHARE"),
    13: .same(proto: "MISSED_SECRET_CHAT"),
  ]
}

extension IGPRoomMessageLog.IGPExtraType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_EXTRA"),
    1: .same(proto: "TARGET_USER"),
  ]
}

extension IGPRoomMessageLog.IGPTargetUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessageLog.IGPTargetUser) -> Bool {
    if self.igpID != other.igpID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessageContact: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_first_name"),
    2: .standard(proto: "IGP_last_name"),
    3: .standard(proto: "IGP_nickname"),
    4: .standard(proto: "IGP_phone"),
    5: .standard(proto: "IGP_email"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessageContact) -> Bool {
    if self.igpFirstName != other.igpFirstName {return false}
    if self.igpLastName != other.igpLastName {return false}
    if self.igpNickname != other.igpNickname {return false}
    if self.igpPhone != other.igpPhone {return false}
    if self.igpEmail != other.igpEmail {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessageForwardFrom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_room_id"),
    2: .standard(proto: "IGP_message_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessageForwardFrom) -> Bool {
    if self.igpRoomID != other.igpRoomID {return false}
    if self.igpMessageID != other.igpMessageID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRegisteredUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_id"),
    2: .standard(proto: "IGP_username"),
    3: .standard(proto: "IGP_phone"),
    4: .standard(proto: "IGP_first_name"),
    5: .standard(proto: "IGP_last_name"),
    6: .standard(proto: "IGP_display_name"),
    7: .standard(proto: "IGP_initials"),
    8: .standard(proto: "IGP_color"),
    9: .standard(proto: "IGP_status"),
    10: .standard(proto: "IGP_last_seen"),
    11: .standard(proto: "IGP_avatar_count"),
    12: .standard(proto: "IGP_avatar"),
    13: .standard(proto: "IGP_mutual"),
    14: .standard(proto: "IGP_deleted"),
    15: .standard(proto: "IGP_cache_id"),
  ]

  fileprivate class _StorageClass {
    var _igpID: Int64 = 0
    var _igpUsername: String = String()
    var _igpPhone: Int64 = 0
    var _igpFirstName: String = String()
    var _igpLastName: String = String()
    var _igpDisplayName: String = String()
    var _igpInitials: String = String()
    var _igpColor: String = String()
    var _igpStatus: IGPRegisteredUser.IGPStatus = .longTimeAgo
    var _igpLastSeen: Int32 = 0
    var _igpAvatarCount: Int32 = 0
    var _igpAvatar: IGPAvatar? = nil
    var _igpMutual: Bool = false
    var _igpDeleted: Bool = false
    var _igpCacheID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpID = source._igpID
      _igpUsername = source._igpUsername
      _igpPhone = source._igpPhone
      _igpFirstName = source._igpFirstName
      _igpLastName = source._igpLastName
      _igpDisplayName = source._igpDisplayName
      _igpInitials = source._igpInitials
      _igpColor = source._igpColor
      _igpStatus = source._igpStatus
      _igpLastSeen = source._igpLastSeen
      _igpAvatarCount = source._igpAvatarCount
      _igpAvatar = source._igpAvatar
      _igpMutual = source._igpMutual
      _igpDeleted = source._igpDeleted
      _igpCacheID = source._igpCacheID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPRegisteredUser) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpID != other_storage._igpID {return false}
        if _storage._igpUsername != other_storage._igpUsername {return false}
        if _storage._igpPhone != other_storage._igpPhone {return false}
        if _storage._igpFirstName != other_storage._igpFirstName {return false}
        if _storage._igpLastName != other_storage._igpLastName {return false}
        if _storage._igpDisplayName != other_storage._igpDisplayName {return false}
        if _storage._igpInitials != other_storage._igpInitials {return false}
        if _storage._igpColor != other_storage._igpColor {return false}
        if _storage._igpStatus != other_storage._igpStatus {return false}
        if _storage._igpLastSeen != other_storage._igpLastSeen {return false}
        if _storage._igpAvatarCount != other_storage._igpAvatarCount {return false}
        if _storage._igpAvatar != other_storage._igpAvatar {return false}
        if _storage._igpMutual != other_storage._igpMutual {return false}
        if _storage._igpDeleted != other_storage._igpDeleted {return false}
        if _storage._igpCacheID != other_storage._igpCacheID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRegisteredUser.IGPStatus: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "LONG_TIME_AGO"),
    1: .same(proto: "LAST_MONTH"),
    2: .same(proto: "LAST_WEEK"),
    3: .same(proto: "ONLINE"),
    4: .same(proto: "EXACTLY"),
    5: .same(proto: "RECENTLY"),
    6: .same(proto: "SUPPORT"),
    7: .same(proto: "SERVICE_NOTIFICATIONS"),
  ]
}

extension IGPAvatar: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_id"),
    2: .standard(proto: "IGP_file"),
  ]

  fileprivate class _StorageClass {
    var _igpID: Int64 = 0
    var _igpFile: IGPFile? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpID = source._igpID
      _igpFile = source._igpFile
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPAvatar) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpID != other_storage._igpID {return false}
        if _storage._igpFile != other_storage._igpFile {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessage: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_message_id"),
    2: .standard(proto: "IGP_message_version"),
    3: .standard(proto: "IGP_status"),
    4: .standard(proto: "IGP_status_version"),
    5: .standard(proto: "IGP_message_type"),
    6: .standard(proto: "IGP_message"),
    7: .standard(proto: "IGP_attachment"),
    8: .standard(proto: "IGP_author"),
    9: .standard(proto: "IGP_location"),
    10: .standard(proto: "IGP_log"),
    11: .standard(proto: "IGP_contact"),
    12: .standard(proto: "IGP_edited"),
    13: .standard(proto: "IGP_create_time"),
    14: .standard(proto: "IGP_update_time"),
    15: .standard(proto: "IGP_deleted"),
    16: .standard(proto: "IGP_forward_from"),
    17: .standard(proto: "IGP_reply_to"),
    18: .standard(proto: "IGP_previous_message_id"),
    19: .standard(proto: "IGP_extra_type"),
    20: .standard(proto: "IGP_channel_extra"),
  ]

  fileprivate class _StorageClass {
    var _igpMessageID: Int64 = 0
    var _igpMessageVersion: Int64 = 0
    var _igpStatus: IGPRoomMessageStatus = .failed
    var _igpStatusVersion: Int64 = 0
    var _igpMessageType: IGPRoomMessageType = .text
    var _igpMessage: String = String()
    var _igpAttachment: IGPFile? = nil
    var _igpAuthor: IGPRoomMessage.IGPAuthor? = nil
    var _igpLocation: IGPRoomMessageLocation? = nil
    var _igpLog: IGPRoomMessageLog? = nil
    var _igpContact: IGPRoomMessageContact? = nil
    var _igpEdited: Bool = false
    var _igpCreateTime: Int32 = 0
    var _igpUpdateTime: Int32 = 0
    var _igpDeleted: Bool = false
    var _igpForwardFrom: IGPRoomMessage? = nil
    var _igpReplyTo: IGPRoomMessage? = nil
    var _igpPreviousMessageID: Int64 = 0
    var _igpExtraType: IGPRoomMessage.IGPExtraType = .noExtra
    var _igpChannelExtra: IGPRoomMessage.IGPChannelExtra? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpMessageID = source._igpMessageID
      _igpMessageVersion = source._igpMessageVersion
      _igpStatus = source._igpStatus
      _igpStatusVersion = source._igpStatusVersion
      _igpMessageType = source._igpMessageType
      _igpMessage = source._igpMessage
      _igpAttachment = source._igpAttachment
      _igpAuthor = source._igpAuthor
      _igpLocation = source._igpLocation
      _igpLog = source._igpLog
      _igpContact = source._igpContact
      _igpEdited = source._igpEdited
      _igpCreateTime = source._igpCreateTime
      _igpUpdateTime = source._igpUpdateTime
      _igpDeleted = source._igpDeleted
      _igpForwardFrom = source._igpForwardFrom
      _igpReplyTo = source._igpReplyTo
      _igpPreviousMessageID = source._igpPreviousMessageID
      _igpExtraType = source._igpExtraType
      _igpChannelExtra = source._igpChannelExtra
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessage) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpMessageID != other_storage._igpMessageID {return false}
        if _storage._igpMessageVersion != other_storage._igpMessageVersion {return false}
        if _storage._igpStatus != other_storage._igpStatus {return false}
        if _storage._igpStatusVersion != other_storage._igpStatusVersion {return false}
        if _storage._igpMessageType != other_storage._igpMessageType {return false}
        if _storage._igpMessage != other_storage._igpMessage {return false}
        if _storage._igpAttachment != other_storage._igpAttachment {return false}
        if _storage._igpAuthor != other_storage._igpAuthor {return false}
        if _storage._igpLocation != other_storage._igpLocation {return false}
        if _storage._igpLog != other_storage._igpLog {return false}
        if _storage._igpContact != other_storage._igpContact {return false}
        if _storage._igpEdited != other_storage._igpEdited {return false}
        if _storage._igpCreateTime != other_storage._igpCreateTime {return false}
        if _storage._igpUpdateTime != other_storage._igpUpdateTime {return false}
        if _storage._igpDeleted != other_storage._igpDeleted {return false}
        if _storage._igpForwardFrom != other_storage._igpForwardFrom {return false}
        if _storage._igpReplyTo != other_storage._igpReplyTo {return false}
        if _storage._igpPreviousMessageID != other_storage._igpPreviousMessageID {return false}
        if _storage._igpExtraType != other_storage._igpExtraType {return false}
        if _storage._igpChannelExtra != other_storage._igpChannelExtra {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessage.IGPExtraType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NO_EXTRA"),
    1: .same(proto: "CHANNEL_EXTRA"),
  ]
}

extension IGPRoomMessage.IGPAuthor: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_hash"),
    2: .standard(proto: "IGP_user"),
    3: .standard(proto: "IGP_room"),
  ]

  fileprivate class _StorageClass {
    var _igpHash: String = String()
    var _igpUser: IGPRoomMessage.IGPAuthor.IGPUser? = nil
    var _igpRoom: IGPRoomMessage.IGPAuthor.IGPRoom? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpHash = source._igpHash
      _igpUser = source._igpUser
      _igpRoom = source._igpRoom
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessage.IGPAuthor) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpHash != other_storage._igpHash {return false}
        if _storage._igpUser != other_storage._igpUser {return false}
        if _storage._igpRoom != other_storage._igpRoom {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessage.IGPAuthor.IGPUser: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_user_id"),
    2: .standard(proto: "IGP_cache_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessage.IGPAuthor.IGPUser) -> Bool {
    if self.igpUserID != other.igpUserID {return false}
    if self.igpCacheID != other.igpCacheID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessage.IGPAuthor.IGPRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_room_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessage.IGPAuthor.IGPRoom) -> Bool {
    if self.igpRoomID != other.igpRoomID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomMessage.IGPChannelExtra: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_signature"),
    2: .standard(proto: "IGP_views_label"),
    3: .standard(proto: "IGP_thumbs_up_label"),
    4: .standard(proto: "IGP_thumbs_down_label"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomMessage.IGPChannelExtra) -> Bool {
    if self.igpSignature != other.igpSignature {return false}
    if self.igpViewsLabel != other.igpViewsLabel {return false}
    if self.igpThumbsUpLabel != other.igpThumbsUpLabel {return false}
    if self.igpThumbsDownLabel != other.igpThumbsDownLabel {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoomDraft: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_message"),
    2: .standard(proto: "IGP_reply_to"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPRoomDraft) -> Bool {
    if self.igpMessage != other.igpMessage {return false}
    if self.igpReplyTo != other.igpReplyTo {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_id"),
    2: .standard(proto: "IGP_type"),
    3: .standard(proto: "IGP_title"),
    4: .standard(proto: "IGP_initials"),
    5: .standard(proto: "IGP_color"),
    6: .standard(proto: "IGP_unread_count"),
    7: .standard(proto: "IGP_last_message"),
    8: .standard(proto: "IGP_read_only"),
    9: .standard(proto: "IGP_is_participant"),
    10: .standard(proto: "IGP_draft"),
    14: .standard(proto: "IGP_first_unread_message"),
    11: .standard(proto: "IGP_chat_room_extra"),
    12: .standard(proto: "IGP_group_room_extra"),
    13: .standard(proto: "IGP_channel_room_extra"),
  ]

  fileprivate class _StorageClass {
    var _igpID: Int64 = 0
    var _igpType: IGPRoom.IGPType = .chat
    var _igpTitle: String = String()
    var _igpInitials: String = String()
    var _igpColor: String = String()
    var _igpUnreadCount: Int32 = 0
    var _igpLastMessage: IGPRoomMessage? = nil
    var _igpReadOnly: Bool = false
    var _igpIsParticipant: Bool = false
    var _igpDraft: IGPRoomDraft? = nil
    var _igpFirstUnreadMessage: IGPRoomMessage? = nil
    var _igpChatRoomExtra: IGPChatRoom? = nil
    var _igpGroupRoomExtra: IGPGroupRoom? = nil
    var _igpChannelRoomExtra: IGPChannelRoom? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpID = source._igpID
      _igpType = source._igpType
      _igpTitle = source._igpTitle
      _igpInitials = source._igpInitials
      _igpColor = source._igpColor
      _igpUnreadCount = source._igpUnreadCount
      _igpLastMessage = source._igpLastMessage
      _igpReadOnly = source._igpReadOnly
      _igpIsParticipant = source._igpIsParticipant
      _igpDraft = source._igpDraft
      _igpFirstUnreadMessage = source._igpFirstUnreadMessage
      _igpChatRoomExtra = source._igpChatRoomExtra
      _igpGroupRoomExtra = source._igpGroupRoomExtra
      _igpChannelRoomExtra = source._igpChannelRoomExtra
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPRoom) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpID != other_storage._igpID {return false}
        if _storage._igpType != other_storage._igpType {return false}
        if _storage._igpTitle != other_storage._igpTitle {return false}
        if _storage._igpInitials != other_storage._igpInitials {return false}
        if _storage._igpColor != other_storage._igpColor {return false}
        if _storage._igpUnreadCount != other_storage._igpUnreadCount {return false}
        if _storage._igpLastMessage != other_storage._igpLastMessage {return false}
        if _storage._igpReadOnly != other_storage._igpReadOnly {return false}
        if _storage._igpIsParticipant != other_storage._igpIsParticipant {return false}
        if _storage._igpDraft != other_storage._igpDraft {return false}
        if _storage._igpFirstUnreadMessage != other_storage._igpFirstUnreadMessage {return false}
        if _storage._igpChatRoomExtra != other_storage._igpChatRoomExtra {return false}
        if _storage._igpGroupRoomExtra != other_storage._igpGroupRoomExtra {return false}
        if _storage._igpChannelRoomExtra != other_storage._igpChannelRoomExtra {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPRoom.IGPType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHAT"),
    1: .same(proto: "GROUP"),
    2: .same(proto: "CHANNEL"),
  ]
}

extension IGPChatRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_peer"),
  ]

  fileprivate class _StorageClass {
    var _igpPeer: IGPRegisteredUser? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpPeer = source._igpPeer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPChatRoom) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpPeer != other_storage._igpPeer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPGroupRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_type"),
    2: .standard(proto: "IGP_role"),
    3: .standard(proto: "IGP_participants_count"),
    4: .standard(proto: "IGP_participants_count_label"),
    5: .standard(proto: "IGP_participants_count_limit"),
    6: .standard(proto: "IGP_participants_count_limit_label"),
    7: .standard(proto: "IGP_description"),
    8: .standard(proto: "IGP_avatar_count"),
    9: .standard(proto: "IGP_avatar"),
    10: .standard(proto: "IGP_private_extra"),
    11: .standard(proto: "IGP_public_extra"),
  ]

  fileprivate class _StorageClass {
    var _igpType: IGPGroupRoom.IGPType = .privateRoom
    var _igpRole: IGPGroupRoom.IGPRole = .member
    var _igpParticipantsCount: Int32 = 0
    var _igpParticipantsCountLabel: String = String()
    var _igpParticipantsCountLimit: Int32 = 0
    var _igpParticipantsCountLimitLabel: String = String()
    var _igpDescription: String = String()
    var _igpAvatarCount: Int32 = 0
    var _igpAvatar: IGPAvatar? = nil
    var _igpPrivateExtra: IGPGroupRoom.IGPPrivateExtra? = nil
    var _igpPublicExtra: IGPGroupRoom.IGPPublicExtra? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpType = source._igpType
      _igpRole = source._igpRole
      _igpParticipantsCount = source._igpParticipantsCount
      _igpParticipantsCountLabel = source._igpParticipantsCountLabel
      _igpParticipantsCountLimit = source._igpParticipantsCountLimit
      _igpParticipantsCountLimitLabel = source._igpParticipantsCountLimitLabel
      _igpDescription = source._igpDescription
      _igpAvatarCount = source._igpAvatarCount
      _igpAvatar = source._igpAvatar
      _igpPrivateExtra = source._igpPrivateExtra
      _igpPublicExtra = source._igpPublicExtra
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPGroupRoom) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpType != other_storage._igpType {return false}
        if _storage._igpRole != other_storage._igpRole {return false}
        if _storage._igpParticipantsCount != other_storage._igpParticipantsCount {return false}
        if _storage._igpParticipantsCountLabel != other_storage._igpParticipantsCountLabel {return false}
        if _storage._igpParticipantsCountLimit != other_storage._igpParticipantsCountLimit {return false}
        if _storage._igpParticipantsCountLimitLabel != other_storage._igpParticipantsCountLimitLabel {return false}
        if _storage._igpDescription != other_storage._igpDescription {return false}
        if _storage._igpAvatarCount != other_storage._igpAvatarCount {return false}
        if _storage._igpAvatar != other_storage._igpAvatar {return false}
        if _storage._igpPrivateExtra != other_storage._igpPrivateExtra {return false}
        if _storage._igpPublicExtra != other_storage._igpPublicExtra {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPGroupRoom.IGPType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIVATE_ROOM"),
    1: .same(proto: "PUBLIC_ROOM"),
  ]
}

extension IGPGroupRoom.IGPRole: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MEMBER"),
    1: .same(proto: "MODERATOR"),
    2: .same(proto: "ADMIN"),
    3: .same(proto: "OWNER"),
  ]
}

extension IGPGroupRoom.IGPPrivateExtra: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_invite_link"),
    2: .standard(proto: "IGP_invite_token"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPGroupRoom.IGPPrivateExtra) -> Bool {
    if self.igpInviteLink != other.igpInviteLink {return false}
    if self.igpInviteToken != other.igpInviteToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPGroupRoom.IGPPublicExtra: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_username"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPGroupRoom.IGPPublicExtra) -> Bool {
    if self.igpUsername != other.igpUsername {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPChannelRoom: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_type"),
    2: .standard(proto: "IGP_role"),
    3: .standard(proto: "IGP_participants_count"),
    4: .standard(proto: "IGP_participants_count_label"),
    5: .standard(proto: "IGP_description"),
    6: .standard(proto: "IGP_avatar_count"),
    7: .standard(proto: "IGP_avatar"),
    8: .standard(proto: "IGP_private_extra"),
    9: .standard(proto: "IGP_public_extra"),
    10: .standard(proto: "IGP_signature"),
    11: .standard(proto: "IGP_seen_id"),
  ]

  fileprivate class _StorageClass {
    var _igpType: IGPChannelRoom.IGPType = .privateRoom
    var _igpRole: IGPChannelRoom.IGPRole = .member
    var _igpParticipantsCount: Int32 = 0
    var _igpParticipantsCountLabel: String = String()
    var _igpDescription: String = String()
    var _igpAvatarCount: Int32 = 0
    var _igpAvatar: IGPAvatar? = nil
    var _igpPrivateExtra: IGPChannelRoom.IGPPrivateExtra? = nil
    var _igpPublicExtra: IGPChannelRoom.IGPPublicExtra? = nil
    var _igpSignature: Bool = false
    var _igpSeenID: Int64 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpType = source._igpType
      _igpRole = source._igpRole
      _igpParticipantsCount = source._igpParticipantsCount
      _igpParticipantsCountLabel = source._igpParticipantsCountLabel
      _igpDescription = source._igpDescription
      _igpAvatarCount = source._igpAvatarCount
      _igpAvatar = source._igpAvatar
      _igpPrivateExtra = source._igpPrivateExtra
      _igpPublicExtra = source._igpPublicExtra
      _igpSignature = source._igpSignature
      _igpSeenID = source._igpSeenID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPChannelRoom) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpType != other_storage._igpType {return false}
        if _storage._igpRole != other_storage._igpRole {return false}
        if _storage._igpParticipantsCount != other_storage._igpParticipantsCount {return false}
        if _storage._igpParticipantsCountLabel != other_storage._igpParticipantsCountLabel {return false}
        if _storage._igpDescription != other_storage._igpDescription {return false}
        if _storage._igpAvatarCount != other_storage._igpAvatarCount {return false}
        if _storage._igpAvatar != other_storage._igpAvatar {return false}
        if _storage._igpPrivateExtra != other_storage._igpPrivateExtra {return false}
        if _storage._igpPublicExtra != other_storage._igpPublicExtra {return false}
        if _storage._igpSignature != other_storage._igpSignature {return false}
        if _storage._igpSeenID != other_storage._igpSeenID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPChannelRoom.IGPType: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PRIVATE_ROOM"),
    1: .same(proto: "PUBLIC_ROOM"),
  ]
}

extension IGPChannelRoom.IGPRole: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MEMBER"),
    1: .same(proto: "MODERATOR"),
    2: .same(proto: "ADMIN"),
    3: .same(proto: "OWNER"),
  ]
}

extension IGPChannelRoom.IGPPrivateExtra: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_invite_link"),
    2: .standard(proto: "IGP_invite_token"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPChannelRoom.IGPPrivateExtra) -> Bool {
    if self.igpInviteLink != other.igpInviteLink {return false}
    if self.igpInviteToken != other.igpInviteToken {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPChannelRoom.IGPPublicExtra: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_username"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPChannelRoom.IGPPublicExtra) -> Bool {
    if self.igpUsername != other.igpUsername {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPThumbnail: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_size"),
    2: .standard(proto: "IGP_width"),
    3: .standard(proto: "IGP_height"),
    4: .standard(proto: "IGP_cache_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPThumbnail) -> Bool {
    if self.igpSize != other.igpSize {return false}
    if self.igpWidth != other.igpWidth {return false}
    if self.igpHeight != other.igpHeight {return false}
    if self.igpCacheID != other.igpCacheID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPFile: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_token"),
    2: .standard(proto: "IGP_name"),
    3: .standard(proto: "IGP_size"),
    4: .standard(proto: "IGP_large_thumbnail"),
    5: .standard(proto: "IGP_small_thumbnail"),
    6: .standard(proto: "IGP_waveform_thumbnail"),
    7: .standard(proto: "IGP_width"),
    8: .standard(proto: "IGP_height"),
    9: .standard(proto: "IGP_duration"),
    10: .standard(proto: "IGP_cache_id"),
  ]

  fileprivate class _StorageClass {
    var _igpToken: String = String()
    var _igpName: String = String()
    var _igpSize: Int64 = 0
    var _igpLargeThumbnail: IGPThumbnail? = nil
    var _igpSmallThumbnail: IGPThumbnail? = nil
    var _igpWaveformThumbnail: IGPThumbnail? = nil
    var _igpWidth: Int32 = 0
    var _igpHeight: Int32 = 0
    var _igpDuration: Double = 0
    var _igpCacheID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpToken = source._igpToken
      _igpName = source._igpName
      _igpSize = source._igpSize
      _igpLargeThumbnail = source._igpLargeThumbnail
      _igpSmallThumbnail = source._igpSmallThumbnail
      _igpWaveformThumbnail = source._igpWaveformThumbnail
      _igpWidth = source._igpWidth
      _igpHeight = source._igpHeight
      _igpDuration = source._igpDuration
      _igpCacheID = source._igpCacheID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPFile) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpToken != other_storage._igpToken {return false}
        if _storage._igpName != other_storage._igpName {return false}
        if _storage._igpSize != other_storage._igpSize {return false}
        if _storage._igpLargeThumbnail != other_storage._igpLargeThumbnail {return false}
        if _storage._igpSmallThumbnail != other_storage._igpSmallThumbnail {return false}
        if _storage._igpWaveformThumbnail != other_storage._igpWaveformThumbnail {return false}
        if _storage._igpWidth != other_storage._igpWidth {return false}
        if _storage._igpHeight != other_storage._igpHeight {return false}
        if _storage._igpDuration != other_storage._igpDuration {return false}
        if _storage._igpCacheID != other_storage._igpCacheID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPWallpaper: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_file"),
    2: .standard(proto: "IGP_color"),
  ]

  fileprivate class _StorageClass {
    var _igpFile: IGPFile? = nil
    var _igpColor: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpFile = source._igpFile
      _igpColor = source._igpColor
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPWallpaper) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpFile != other_storage._igpFile {return false}
        if _storage._igpColor != other_storage._igpColor {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPPagination: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_offset"),
    2: .standard(proto: "IGP_limit"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPPagination) -> Bool {
    if self.igpOffset != other.igpOffset {return false}
    if self.igpLimit != other.igpLimit {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
