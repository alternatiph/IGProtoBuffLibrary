// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: UserContactsImport.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct IGPUserContactsImport: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPUserContactsImport"

  public var igpRequest: IGPRequest {
    get {return _storage._igpRequest ?? IGPRequest()}
    set {_uniqueStorage()._igpRequest = newValue}
  }
  /// Returns true if `igpRequest` has been explicitly set.
  public var hasIgpRequest: Bool {return _storage._igpRequest != nil}
  /// Clears the value of `igpRequest`. Subsequent reads from it will return its default value.
  public mutating func clearIgpRequest() {_storage._igpRequest = nil}

  public var igpContacts: [IGPUserContactsImport.IGPContact] {
    get {return _storage._igpContacts}
    set {_uniqueStorage()._igpContacts = newValue}
  }

  public var igpForce: Bool {
    get {return _storage._igpForce}
    set {_uniqueStorage()._igpForce = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct IGPContact: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPUserContactsImport.protoMessageName + ".IGPContact"

    public var igpPhone: String = String()

    public var igpFirstName: String = String()

    public var igpLastName: String = String()

    public var igpClientID: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpPhone)
        case 2: try decoder.decodeSingularStringField(value: &self.igpFirstName)
        case 3: try decoder.decodeSingularStringField(value: &self.igpLastName)
        case 4: try decoder.decodeSingularStringField(value: &self.igpClientID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpPhone.isEmpty {
        try visitor.visitSingularStringField(value: self.igpPhone, fieldNumber: 1)
      }
      if !self.igpFirstName.isEmpty {
        try visitor.visitSingularStringField(value: self.igpFirstName, fieldNumber: 2)
      }
      if !self.igpLastName.isEmpty {
        try visitor.visitSingularStringField(value: self.igpLastName, fieldNumber: 3)
      }
      if !self.igpClientID.isEmpty {
        try visitor.visitSingularStringField(value: self.igpClientID, fieldNumber: 4)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpRequest)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._igpContacts)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._igpForce)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpRequest {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._igpContacts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._igpContacts, fieldNumber: 2)
      }
      if _storage._igpForce != false {
        try visitor.visitSingularBoolField(value: _storage._igpForce, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct IGPUserContactsImportResponse: SwiftProtobuf.Message {
  public static let protoMessageName: String = "IGPUserContactsImportResponse"

  public var igpResponse: IGPResponse {
    get {return _storage._igpResponse ?? IGPResponse()}
    set {_uniqueStorage()._igpResponse = newValue}
  }
  /// Returns true if `igpResponse` has been explicitly set.
  public var hasIgpResponse: Bool {return _storage._igpResponse != nil}
  /// Clears the value of `igpResponse`. Subsequent reads from it will return its default value.
  public mutating func clearIgpResponse() {_storage._igpResponse = nil}

  public var igpRegisteredContacts: [IGPUserContactsImportResponse.IGPContact] {
    get {return _storage._igpRegisteredContacts}
    set {_uniqueStorage()._igpRegisteredContacts = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct IGPContact: SwiftProtobuf.Message {
    public static let protoMessageName: String = IGPUserContactsImportResponse.protoMessageName + ".IGPContact"

    public var igpClientID: String = String()

    public var igpUserID: Int64 = 0

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}

    /// Used by the decoding initializers in the SwiftProtobuf library, not generally
    /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
    /// initializers are defined in the SwiftProtobuf library. See the Message and
    /// Message+*Additions` files.
    public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularStringField(value: &self.igpClientID)
        case 2: try decoder.decodeSingularInt64Field(value: &self.igpUserID)
        default: break
        }
      }
    }

    /// Used by the encoding methods of the SwiftProtobuf library, not generally
    /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
    /// other serializer methods are defined in the SwiftProtobuf library. See the
    /// `Message` and `Message+*Additions` files.
    public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
      if !self.igpClientID.isEmpty {
        try visitor.visitSingularStringField(value: self.igpClientID, fieldNumber: 1)
      }
      if self.igpUserID != 0 {
        try visitor.visitSingularInt64Field(value: self.igpUserID, fieldNumber: 2)
      }
      try unknownFields.traverse(visitor: &visitor)
    }
  }

  public init() {}

  /// Used by the decoding initializers in the SwiftProtobuf library, not generally
  /// used directly. `init(serializedData:)`, `init(jsonUTF8Data:)`, and other decoding
  /// initializers are defined in the SwiftProtobuf library. See the Message and
  /// Message+*Additions` files.
  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._igpResponse)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._igpRegisteredContacts)
        default: break
        }
      }
    }
  }

  /// Used by the encoding methods of the SwiftProtobuf library, not generally
  /// used directly. `Message.serializedData()`, `Message.jsonUTF8Data()`, and
  /// other serializer methods are defined in the SwiftProtobuf library. See the
  /// `Message` and `Message+*Additions` files.
  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._igpResponse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
      if !_storage._igpRegisteredContacts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._igpRegisteredContacts, fieldNumber: 2)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension IGPUserContactsImport: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_request"),
    2: .standard(proto: "IGP_contacts"),
    3: .standard(proto: "IGP_force"),
  ]

  fileprivate class _StorageClass {
    var _igpRequest: IGPRequest? = nil
    var _igpContacts: [IGPUserContactsImport.IGPContact] = []
    var _igpForce: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpRequest = source._igpRequest
      _igpContacts = source._igpContacts
      _igpForce = source._igpForce
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPUserContactsImport) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpRequest != other_storage._igpRequest {return false}
        if _storage._igpContacts != other_storage._igpContacts {return false}
        if _storage._igpForce != other_storage._igpForce {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPUserContactsImport.IGPContact: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_phone"),
    2: .standard(proto: "IGP_first_name"),
    3: .standard(proto: "IGP_last_name"),
    4: .standard(proto: "IGP_client_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPUserContactsImport.IGPContact) -> Bool {
    if self.igpPhone != other.igpPhone {return false}
    if self.igpFirstName != other.igpFirstName {return false}
    if self.igpLastName != other.igpLastName {return false}
    if self.igpClientID != other.igpClientID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPUserContactsImportResponse: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_response"),
    2: .standard(proto: "IGP_registered_contacts"),
  ]

  fileprivate class _StorageClass {
    var _igpResponse: IGPResponse? = nil
    var _igpRegisteredContacts: [IGPUserContactsImportResponse.IGPContact] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _igpResponse = source._igpResponse
      _igpRegisteredContacts = source._igpRegisteredContacts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public func _protobuf_generated_isEqualTo(other: IGPUserContactsImportResponse) -> Bool {
    if _storage !== other._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((_storage, other._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let other_storage = _args.1
        if _storage._igpResponse != other_storage._igpResponse {return false}
        if _storage._igpRegisteredContacts != other_storage._igpRegisteredContacts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if unknownFields != other.unknownFields {return false}
    return true
  }
}

extension IGPUserContactsImportResponse.IGPContact: SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .standard(proto: "IGP_client_id"),
    2: .standard(proto: "IGP_user_id"),
  ]

  public func _protobuf_generated_isEqualTo(other: IGPUserContactsImportResponse.IGPContact) -> Bool {
    if self.igpClientID != other.igpClientID {return false}
    if self.igpUserID != other.igpUserID {return false}
    if unknownFields != other.unknownFields {return false}
    return true
  }
}
